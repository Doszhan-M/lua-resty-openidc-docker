worker_processes 1;
events {
    worker_connections  128;
}

http {
  # include mime.types;
  # default_type application/octet-stream;
  # sendfile on;
  # keepalive_timeout 65;
  # # lua_code_cache off;
  # lua_need_request_body on;
  # gzip on;

  # resolver 127.0.0.11 ipv6=off;
  # real_ip_header X-Forwarded-For;
  # real_ip_recursive on;

  lua_package_path '~/lua/?.lua;;';
  resolver 8.8.8.8;
  lua_ssl_verify_depth 5;
  lua_shared_dict discovery 1m;
  lua_shared_dict jwks 1m;

  server {
    listen 8081;
    default_type plain/text;
    location / {
      content_by_lua '
        ngx.say("Hello ", ngx.req.get_headers()["X-USER"])
      ';
    }
  }

  server {
    listen 80;
    # listen 443 ssl;
    server_name  pk-local.backend;

    # ssl_certificate /etc/certs/local.traefik.crt;
    # ssl_certificate_key /etc/certs/local.traefik.key;
    
    # set $session_name nginx_session;
    charset utf-8;
    default_type text/html;

    location /ast{
        proxy_pass http://pk_backend:8000/;
        proxy_set_header x-forwarded-proto $scheme;
    }

    location / {

      access_by_lua_block {
        local opts = {
          redirect_uri = "/api/web/accounts/sso_token/",
          discovery = "https://id.uchet.kz/.idp/.well-known/openid-configuration",
          client_id = "pk2-test",
          client_secret = "4aHDNQL~~bTYVoGCz1jQECE_O3",
          scope = "offline_access offline openid",
          ssl_verify = "no",
          token_endpoint_auth_method = "client_secret_basic",

        }
        local res, err = require("resty.openidc").authenticate(opts)
        
        if err then
          ngx.status = 500
          ngx.say(err)
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

          ngx.req.set_header("X-USER", res.id_token.sub)
        }

        proxy_pass http://pk_backend:8000/;
        proxy_set_header x-forwarded-proto $scheme;
      }


  }
}